 
ðŸ“„ Enterprise SaaS â€“ AI Software Generator (MVP Spec & Setup Guide)
 
1. Project Vision
What It Is
An enterprise SaaS platform where users describe a software requirement in plain English â†’ the system automatically:
1.	Breaks it down into tasks (via AI PM).
2.	Generates working code (via AI Engineer).
3.	Tests it (via AI QA + sandbox).
4.	Stores repos/logs.
5.	Provides audit logs for compliance.
Why
â€¢	Enterprises want faster software delivery with compliance & control.
â€¢	Existing tools (GitHub Copilot, ChatGPT) are individual, not enterprise multi-tenant platforms.
â€¢	We differentiate with Auth, RBAC, Audit, Secure Execution, Multi-tenancy, Integrations.
Users
â€¢	Consulting firms
â€¢	IT service companies
â€¢	Enterprise dev teams with compliance needs
 
2. Repo Layout
/saas-devgen
 â”œâ”€â”€ /auth-service        # Authentication & tenant management (Keycloak)
 â”œâ”€â”€ /orchestrator        # Requirement intake, task breakdown, agent workflows
 â”œâ”€â”€ /codegen-service     # Code generation via AI agents (MetaGPT/OpenDevin)
 â”œâ”€â”€ /executor-service    # Secure sandbox execution (E2B/Docker)
 â”œâ”€â”€ /storage-service     # File/object storage + metadata
 â”œâ”€â”€ /audit-service       # Logging + telemetry (OpenTelemetry + Loki)
 â”œâ”€â”€ /api-gateway         # Unified entrypoint (FastAPI)
 â”œâ”€â”€ /frontend            # (Later) Next.js dashboard
 â””â”€â”€ /infra               # Docker/K8s manifests
 
3. Architecture
[User] â†’ [Auth: Keycloak] â†’ [API Gateway]
       â†’ [Orchestrator â†’ MetaGPT (PM)]
       â†’ [Codegen: Engineer â†’ Repo]
       â†’ [Storage: Save Repo/Metadata]
       â†’ [Executor: Sandbox Run â†’ Logs]
       â†’ [Audit Service: Log Events]
       â†’ [Response back to User]
 
4. Modules & Libraries
4.1 Auth Service
â€¢	Purpose: Login, RBAC, tenant isolation.
â€¢	Libraries: Keycloak (Apache 2.0), python-keycloak.
â€¢	MVP: JWT auth + tenant claims.
4.2 Orchestrator Service
â€¢	Purpose: Intake requirement â†’ manage agent workflows.
â€¢	Libraries: FastAPI, LangGraph, MetaGPT.
â€¢	MVP: PM agent â†’ breakdown â†’ send to codegen.
4.3 Codegen Service
â€¢	Purpose: Generate actual code.
â€¢	Libraries: MetaGPT (Engineer role) OR OpenDevin.
â€¢	MVP: Output repo + save to storage.
4.4 Executor Service
â€¢	Purpose: Run code safely.
â€¢	Libraries: E2B sandbox, Docker SDK for Python.
â€¢	MVP: Execute tests, return logs.
4.5 Storage Service
â€¢	Purpose: Store repos, artifacts, logs.
â€¢	Libraries: Minio, SQLAlchemy + Postgres.
â€¢	MVP: Save {tenant_id}/{project_id}/ repos + metadata.
4.6 Audit Service
â€¢	Purpose: Audit logs.
â€¢	Libraries: OpenTelemetry, Loki.
â€¢	MVP: Log requirement submitted, code generated, execution run.
4.7 API Gateway
â€¢	Purpose: Single entrypoint.
â€¢	Libraries: FastAPI.
â€¢	MVP: Routes requests to services.
4.8 Frontend (Later R2)
â€¢	Libraries: Next.js, ReactFlow, Shadcn/UI.
â€¢	MVP: Minimal Swagger / REST test only.
 
5. API Contracts
Auth Service
POST /auth/login
  Input: { username, password }
  Output: { access_token, tenant_id }

GET /auth/user
  Headers: Authorization: Bearer <token>
  Output: { user_id, tenant_id, roles }
Orchestrator
POST /requirements
  Input: { requirement: "Build REST API in FastAPI for employees" }
  Output: { requirement_id, tasks[], status }
Codegen
POST /codegen/{requirement_id}
  Input: { tasks[], language, framework }
  Output: { repo_url, commit_id, status }
Executor
POST /executor/run
  Input: { repo_url, command }
  Output: { execution_id, logs, status }
Storage
GET /storage/projects/{project_id}
  Output: { files[], repo_url, metadata }
Audit
GET /audit/logs?tenant_id=123
  Output: [ { timestamp, action, user_id, requirement_id } ]
 
6. Data Model (Postgres)
Users
id, username, email, tenant_id, roles[]
Tenants
id, name, org_id
Requirements
id, tenant_id, user_id, text, status, created_at
Tasks
id, requirement_id, description, status
Projects
id, tenant_id, requirement_id, repo_url, metadata
Executions
id, project_id, command, logs, status
Audit Logs
id, tenant_id, user_id, action, entity, timestamp
 
7. Setup Instructions
7.1 Prerequisites
â€¢	Docker & Docker Compose
â€¢	Python 3.10+
â€¢	Node.js (for later frontend)
7.2 Environment Variables (.env)
POSTGRES_USER=devgen
POSTGRES_PASSWORD=secret
POSTGRES_DB=devgen
MINIO_ROOT_USER=admin
MINIO_ROOT_PASSWORD=admin123
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=admin
7.3 Docker Compose (MVP infra)
/infra/docker-compose.yml
version: "3.9"
services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: [ "5432:5432" ]

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data
    ports: [ "9000:9000", "9001:9001" ]

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    command: start-dev
    ports: [ "8080:8080" ]

  loki:
    image: grafana/loki:2.9.0
    ports: [ "3100:3100" ]
7.4 Service Bootstraps
Orchestrator (FastAPI)
cd orchestrator
python -m venv venv && source venv/bin/activate
pip install fastapi uvicorn metagpt langgraph
uvicorn main:app --reload --port 8001
Codegen
cd codegen-service
pip install fastapi opendevin metagpt
uvicorn main:app --reload --port 8002
Executor
cd executor-service
pip install fastapi docker e2b
uvicorn main:app --reload --port 8003
Storage
cd storage-service
pip install fastapi sqlalchemy psycopg2 minio
uvicorn main:app --reload --port 8004
Audit
cd audit-service
pip install fastapi opentelemetry-api opentelemetry-sdk
uvicorn main:app --reload --port 8005
API Gateway
cd api-gateway
pip install fastapi httpx
uvicorn main:app --reload --port 8000
 
8. MVP Deliverables
âœ… Auth with Keycloak (JWT)
âœ… Requirement intake â†’ MetaGPT PM breakdown
âœ… Code generation â†’ Engineer â†’ repo in Minio
âœ… Sandbox execution â†’ logs returned
âœ… Audit logging per tenant
âœ… REST APIs exposed via FastAPI gateway
 
9. Roadmap
Release 2 (Enterprise-ready)
â€¢	Add Temporal workflows for reliability.
â€¢	UI Dashboard (Next.js + ReactFlow).
â€¢	GitHub/Jira/Slack integrations.
â€¢	Role-based Access Control (RBAC).
Release 3 (Ecosystem Integration)
â€¢	Full CI/CD integration.
â€¢	On-prem deployment option.
â€¢	Analytics & reporting for managers.
 
âœ… With this spec, devs can clone the repo, spin up infra, and begin coding each service.

